generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Theme {
  light
  dark
  system
}

model User {
  id                     Int        @id @default(autoincrement())
  email                  String     @unique
  username               String     @unique @db.VarChar(16)
  password               String
  firstName              String?
  lastName               String?
  birthday               DateTime?
  currency               String     @default("USD")
  mobileNumber           String?
  theme                  Theme      @default(light)
  totalMoneySavedToDate  Float      @default(0)
  emailVerified          Boolean    @default(false)
  loggedIn               Boolean    @default(false)
  signedVerificationCode String?
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  // Has Many
  overview               Overview[]
  logbooks               Logbook[]
}

enum Category {
  need
  planned
  impulse
  regret
}

model Purchase {
  id                           Int           @id @default(autoincrement())
  placement                    Int
  category                     Category?
  description                  String
  cost                         Float
  createdAt                    DateTime      @default(now())
  updatedAt                    DateTime      @updatedAt
  // Belongs To
  overviewRecurringPurchases   Overview?     @relation(name: "OverviewRecurringPurchases", fields: [overviewRecurringPurchasesId], references: [id], onDelete: Cascade)
  overviewRecurringPurchasesId Int?
  overviewIncomingPurchases    Overview?     @relation(name: "OverviewIncomingPurchases", fields: [overviewIncomingPurchasesId], references: [id], onDelete: Cascade)
  overviewIncomingPurchasesId  Int?
  // 
  logbookEntry                 LogbookEntry? @relation(fields: [logbookEntryId], references: [id])
  logbookEntryId               Int?
}

model Overview {
  id                 Int        @id @default(autoincrement())
  income             Float
  savings            Float      @default(0)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  // One To One
  owner              User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId            Int        @unique
  // Has Many
  recurringPurchases Purchase[] @relation(name: "OverviewRecurringPurchases")
  incomingPurchases  Purchase[] @relation(name: "OverviewIncomingPurchases")
}

// Automatically created at the beginning of a new month.
// `name` field default to month and year in which the logbook was created (e.g. "Jan. 2023").
// `name` field MAY be edited later down the line for potentially better UX.
model Logbook {
  id        Int            @id @default(autoincrement())
  name      String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  // Has Many
  entries   LogbookEntry[]
  // Belongs to
  owner     User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   Int
}

model LogbookEntry {
  id        Int        @id @default(autoincrement())
  date      DateTime
  spent     Float      @default(0)
  budget    Float?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  // Has Many
  purchases Purchase[]
  // Belongs To
  logbook   Logbook    @relation(fields: [logbookId], references: [id], onDelete: Cascade)
  logbookId Int
}
